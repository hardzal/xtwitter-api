// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  username String  @unique
  email    String  @unique
  password String
  verify   Boolean @default(false)

  profile     Profile?
  threads     Thread[]
  likes       Like[]
  replies     Reply[]
  likeReplies LikeReply[]

  followed  Follow[] @relation("followedUser")
  following Follow[] @relation("followingUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id String @id @default(uuid())

  fullName  String
  avatar    String?
  bannerURL String?
  bio       String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Thread {
  id String @id @default(uuid())

  content String?
  images  String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  likes   Like[]
  replies Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("threads")
}

model Follow {
  id String @id @default(uuid())

  followed   User   @relation(name: "followedUser", fields: [followedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedId String // yang difollow

  following   User   @relation(name: "followingUser", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String // yang memfollow

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("follows")
}

model Like {
  id String @id @default(uuid())

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model Reply {
  id String @id @default(uuid())

  thread   Thread? @relation(fields: [threadId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  threadId String?

  content String
  images  String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  likeReply LikeReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("replies")
}

model LikeReply {
  id String @id @default(uuid())

  reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likeReplies")
}
